package com.shinian.exception;


public class DynamicFields {

    private Object[][] fields;

    public DynamicFields(int initialSize) {
        fields = new Object[initialSize][2];
        for (int i = 0; i < initialSize; i++) {
            fields[i] = new Object[] { null, null };
        }
    }

    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        for (Object[] objects : fields) {
            result.append(objects[0]);
            result.append(": ");
            result.append(objects[1]);
            result.append("\n");
        }

        return result.toString();
    }

    private int hasField(String id) {
        for (int i = 0; i < fields.length; i++) {
            if (id.equals(fields[i][0])) {
                return i;
            }
        }
        return -1;
    }

    private int getFieldNumber(String id) throws NoSuchFieldException {
        int fieldNum = hasField(id);
        if (fieldNum == -1) {
            throw new NoSuchFieldException();
        }
        return fieldNum;
    }

    private int makeField(String id) {
        for (int i = 0; i < fields.length; i++) {
            if (fields[i][0] == null) {
                fields[i][0] = id;
                return i;
            }
        }
        // 没有空字段 增加一个
        Object[][] tmp = new Object[fields.length + 1][2];
        for (int i = 0; i < fields.length; i++) {
            tmp[i] = fields[i];
        }
        for (int i = fields.length; i < tmp.length; i++) {
            tmp[i] = new Object[] { null, null };
        }
        fields = tmp;
        // resursive call with expanded fields
        return makeField(id);
    }

    public Object getFeId(String id) throws NoSuchFieldException {
        return fields[getFieldNumber(id)][1];
    }

    public Object setField(String field, Object value)
            throws DynamicFieldsException {
        if (value == null) {
            DynamicFieldsException dynamicFieldsException = new DynamicFieldsException();
            dynamicFieldsException.initCause(new NullPointerException());
            throw dynamicFieldsException;
        }
        int fieldNumber = hasField(field);
        if (fieldNumber == -1) {
            fieldNumber=makeField(field);
        }
        Object result = null;
        try {
            result = getFeId(field);
        } catch (NoSuchFieldException e) {
            throw new RuntimeException(e);
        }
        fields[fieldNumber][1] = value;

        return result;

    }

    public static void main(String[] args) {
        DynamicFields df = new DynamicFields(3);

        try {
            df.setField("d", "a value of d");
            System.out.println(df);
            Object value = df.getFeId("d");
            System.out.println(value);
        } catch (NoSuchFieldException e) {
            e.printStackTrace(System.out);
        } catch (DynamicFieldsException e) {
            e.printStackTrace(System.out);
        }

    }

}

class DynamicFieldsException extends Exception {
    private static final long serialVersionUID = 1L;

}
